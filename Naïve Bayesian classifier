from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
# Step 1: Load the digits dataset
digits = load_digits()
# Step 2: Features and labels
X = digits.data      # Each image is flattened into a 64-length vector (8x8)
y = digits.target    # The digit labels (0 to 9)
# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train a Naive Bayes classifier
model = GaussianNB()
model.fit(X_train, y_train)
# Step 5: Make predictions on the test set
y_pred = model.predict(X_test)
# Step 6: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Step 7: Show some predictions
plt.figure(figsize=(10, 4))
for index, (image, prediction) in enumerate(zip(X_test[:5], y_pred[:5])):
    plt.subplot(1, 5, index + 1)
    plt.imshow(image.reshape(8, 8), cmap='gray')
    plt.title(f'Pred: {prediction}')
    plt.axis('off')
plt.tight_layout()
plt.show() 
